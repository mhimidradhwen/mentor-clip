// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://prisly.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =======================================================
// NEW CHALLENGE MODEL (Created by Admin/Professional)
// =======================================================
model Challenge {
  id          String   @id @default(uuid())
  title       String
  description String?
  startDate   DateTime // When the challenge starts
  endDate     DateTime // Submission deadline
  isActive    Boolean  @default(true) // Whether students can currently submit

  // Relationship to the admin/professional who created it
  creatorId String
  creator   User   @relation("CreatedChallenges", fields: [creatorId], references: [id], onDelete: Restrict)

  // Submissions associated with this challenge
  submissions VideoSubmission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("challenge")
}

// =======================================================
// VIDEO SUBMISSION MODEL (Links Student Video to a Challenge)
// =======================================================
model VideoSubmission {
  id      String  @id @default(uuid())
  isFinal Boolean @default(false) // Flag if this is the final, graded submission

  // Relationships
  challengeId String
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  videoId String @unique // Each submission must point to a unique video
  video   Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)

  // Timestamps
  submittedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([challengeId, videoId]) // A video can only be submitted once per challenge
  @@map("video_submission")
}

// =======================================================
// UPDATED VIDEO NOTE MODEL (now includes a score field)
// =======================================================
model VideoNote {
  id      String @id @default(uuid())
  content String // The actual text of the note/feedback
  score   Int? // NEW: Score given by the supervisor (e.g., out of 100)

  // Optional: Allows notes to be tied to a specific time in the video
  timestampMs Int? // Time in milliseconds (e.g., 30500 for 30.5 seconds)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationship to Video (Unchanged from original structure)
  videoId String
  video   Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)

  // Relationship to Supervisor (Unchanged from original structure)
  supervisorId String
  supervisor   User   @relation("SupervisorNotes", fields: [supervisorId], references: [id], onDelete: Restrict)

  @@map("video_note")
}

// =======================================================
// VIDEO MODEL (Updated relation)
// =======================================================
model Video {
  id          String  @id @default(uuid())
  title       String // From the form data
  description String? // From the form data

  // The unique identifier for the file in S3, obtained from the presigned URL request
  s3Key String @unique

  // Metadata about the file
  fileSize    Int // Stored in bytes
  contentType String

  // Relationships
  userId   String
  uploader User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Video can have multiple notes
  notes VideoNote[]

  // NEW RELATION FIELD: Video can be part of a submission
  submission VideoSubmission? // A video can only be one submission

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("video")
}

// =======================================================
// USER MODEL (Updated relation)
// =======================================================
model User {
  id             String    @id
  name           String
  email          String
  emailVerified  Boolean   @default(false)
  image          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
  sessions       Session[]
  accounts       Account[]
  role           String    @default("student")
  studentId      String?   @unique
  professionalId String?   @unique
  class          String?

  // Relationship: User can have many Videos (as a student uploader)
  uploadedVideos Video[]

  // Relationship: User can create many Notes (as a supervisor)
  createdNotes VideoNote[] @relation("SupervisorNotes")

  // NEW RELATION FIELD: User can create many Challenges (as an admin/professional)
  createdChallenges Challenge[] @relation("CreatedChallenges")

  @@unique([email])
  @@map("user")
}

// =======================================================
// OTHER MODELS (No changes needed)
// =======================================================
model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}
